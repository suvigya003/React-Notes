Node Js is a js runtime which helps in executing js on computer. 
NPM is permanent and is used to download pkg manager.
NPX is temporary for 1 app. Pkgs are used and then removed when app is complete.
React is a JavaScript library for building user interfaces which is useful in developing user interfaces specifically for applications with a single page. 
It is a server side scripting language.
- JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM.
- DOM
   The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. 
   It defines the logical structure of documents and the way a document is accessed and manipulated.
   With the Document Object Model, programmers can build documents, navigate their structure, and add, modify, or delete elements and content. 
   Anything found in an HTML or XML document can be accessed, changed, deleted, or added using the Document Object Model.
- Virtual DOM
   React uses two virtual DOMs to render the user interface. 
   One of them is used to store the current state of the objects and the other to store the previous state of the objects. 
   Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated. 
   After knowing which objects were updated, react renders only those objects inside the real DOM instead of rendering the complete real DOM. 
   This way, with the use of virtual DOM, react solves the problem of inefficient updating.   
- Component lifecycle:
   Initialisation
   Mounting
   Updation
   Unmounting
- Components is a class or function that returns JSX.
- Components can have state which is an object that dteremines how a component renders/behaves.
   Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
   Create a Function component called Car
   function Car() {
      return <h2>Hi, I am a Car!</h2>;
   }

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);
- Context API is used to manage a lot of states in components.
- const name=Ram
   return(
    <h2>{name}</h2>     // to access js elements use {}
  )
  
- React hooks:
   React Hooks are the built-in functions.
   Using Hook, all features of React can be used without writing class components.
   React hooks are react functions that let us hook into React state from function components.
   - useEffect- fetches HTTP requests when page reloads / does something at page reload.
   - useState- returns a stateful value and a function to update it.
  
- Web page / UI is just a bunch of components.
- Styling:
   return(
   <h1 style={styling}>Hello</h1>)     // <h1> is a component
   const styling={    // styling is a variable
   color:'red'
   }
 - State:
   A Js object used to represent info in or about a particular component. 
   It is handled inside a component.
 - props:
   They are handled outside the component.
   App.js
   <header color='red'/>
   <header color='green'/>       //reusing of components output-- 2 times Hello
   Header.js
   <div style={{backgroundColor:color}}>Hello</div>
   
 - Props are arguments passed into React components.
   They are used to differentiate the components when we are reusing it.
   React Props are like function arguments in JavaScript and attributes in HTML.
   Props are the data passed from a parent component into a child component.
   Using props, we can pass data from one component to another.
   const myElement = <Car brand="Ford" />;
   
 - Prop drilling 
   Sometimes while developing React applications, there is a need to pass data from a component 
   that is higher in the hierarchy to a component that is deeply nested. 
   To pass data between such components, we pass props from a source component and keep passing the prop to the next component 
   in the hierarchy till we reach the deeply nested component.
   
 - Events:
   function Football() {
  const shoot = () => {          //shoot is an event handler function
    alert("Great Shot!");
  }

  return (
    <button onClick={shoot}>Take the shot!</button>
  );
}

- Create a list using .map() function
   const tasks=[     //here task state is outside main function, to use state inside function useState is used
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }
   ]
   func =()=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   // to pass within the function
   func =()=>{
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   
   //to use the state anywhere, it is passed globally 
   App.js
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   
   return(
   <Tasks tasks={tasks}/>
   )
   
   Tasks.js
   func =({tasks})=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}     //task is a function passed inside map
   )
   
- useState
   Since useState hook returns an array of two items, the first item contains the current state, and the second item is a function used to update the state.
   function Person(props) {
   // We are declaring a state variable called name.
   // setName is a function to update/change the value of name
   let [name, setName] = useState('');
   }
      
   function ChildComponent(props) {
   let childCounterValue = props.counterValue;
   return (
    <div>
    <button onClick={() => props.callbackFunc(++childCounterValue)}>
      Increment Counter
    </button>
    </div>
   );
   }
      
- setTodo(...todo, {})     //...todo -- brings old data and {} -- adds new one to current array/list

- updating setTasks:
   const toggle=(id)=>{
   setTasks(
   tasks.map((task)=>task.id===id?{...task , reminder : task.reminder}:task)
   )
   }
   
- <input value={text} onChange={(e)=> setText(e.target.value)}/>     // e.target.value sets the value by setText whatever is typed in
 
- <div className= {`task ${ task.reminder ? reminder : ''}`}>        //task will be the class no matter what other conditions are, 
// more will be added if condition given by ${} gets fulfilled , it's all due to ``

- array.sort() method
   The sort method without any arguments sorts values alphabetically.
   1) function numAscending(a,b) {
    return a - b;
   }
   the sort function compares each pair of values if a - b is negative then a comes before b, if a - b is positive b comes before a.
   2) function numRandomized() {
    return 0.5 - Math.random();
   }
   will return a random order because the function returns a number that is equally likely to be either negative or positive it will cause a random order.
   0.5 - Math.random() will give you random numbers that are roughly 50% negative and 50% positive.
   The comparision happens more than just one time and each time with different arguement due to Math.random
