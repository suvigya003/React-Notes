React is a JavaScript library for building user interfaces which is useful in developing user interfaces specifically for applications with a single page.
- JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM
- Components return JSX.
- Components can have state which is an object that dteremines how a component renders/behaves.
   Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
   Create a Function component called Car
   function Car() {
      return <h2>Hi, I am a Car!</h2>;
   }

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);
- Context API is used to manage a lot of states in components.
- React hooks are react functions that let us hook into React state from function components.
- useEffect- fetches HTTP requests when page reloads / does something at page reload.
- useState- returns a stateful value and a function to update it.
- const name=Ram
   return(
    <h2>{name}</h2>     // to access js elements use {}
  )
- Web page / UI is just a bunch of components.
- Styling:
   return(
   <h1 style={styling}>Hello</h1>)     // <h1> is a component
   const styling={    // styling is a variable
   color:'red'
   }
 - props:
   App.js
   <header color='red'/>
   <header color='green'/>       //reusing of components output-- 2 times Hello
   Header.js
   <div style={{backgroundColor:color}}>Hello</div>
   
 - Props are arguments passed into React components.
   React Props are like function arguments in JavaScript and attributes in HTML.
   const myElement = <Car brand="Ford" />;
   
 - Events:
   function Football() {
  const shoot = () => {          //shoot is an event handler function
    alert("Great Shot!");
  }

  return (
    <button onClick={shoot}>Take the shot!</button>
  );
}

- Create a list using .map() function
   const tasks=[     //here task state is outside main function, to use state inside function useState is used
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }
   ]
   func =()=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   // to pass within the function
   func =()=>{
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   
   //to use the state anywhere, it is passed globally 
   App.js
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   
   return(
   <Tasks tasks={tasks}/>
   )
   
   Tasks.js
   func =({tasks})=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}     //tasks is a function passed inside map
   )
   
- setTodo(...todo, {})     //...todo -- brings old data and {} -- adds new one to current array/list

- updating setTasks:
   const toggle=(id)=>{
   setTasks(
   tasks.map((task)=>task.id===id?{...task , reminder : task.reminder}:task)
   )
   }
   
- <input value={text} onChange={(e)=> setText(e.target.value)}/>     // e.target.value sets the value by setText whatever is typed in
 
- <div className= {`task ${ task.reminder ? reminder : ''}`}>        //task will be the class no matter what, 
// more will be added if condition given by ${} gets fulfilled , it's all due to ``
