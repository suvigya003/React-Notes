React is a JavaScript library for building user interfaces which is useful in developing user interfaces specifically for applications with a single page.
- JSX stands for JavaScript XML. It allows us to write HTML inside JavaScript and place them in the DOM.
- Virtual DOM
   React uses two virtual DOMs to render the user interface. 
   One of them is used to store the current state of the objects and the other to store the previous state of the objects. 
   Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated. 
   After knowing which objects were updated, react renders only those objects inside the real DOM instead of rendering the complete real DOM. 
   This way, with the use of virtual DOM, react solves the problem of inefficient updating.   
- Components return JSX.
- Components can have state which is an object that dteremines how a component renders/behaves.
   Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.
   Create a Function component called Car
   function Car() {
      return <h2>Hi, I am a Car!</h2>;
   }

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);
- Context API is used to manage a lot of states in components.
- React hooks are react functions that let us hook into React state from function components.
- useEffect- fetches HTTP requests when page reloads / does something at page reload.
- useState- returns a stateful value and a function to update it.
- const name=Ram
   return(
    <h2>{name}</h2>     // to access js elements use {}
  )
- Web page / UI is just a bunch of components.
- Styling:
   return(
   <h1 style={styling}>Hello</h1>)     // <h1> is a component
   const styling={    // styling is a variable
   color:'red'
   }
 - props:
   App.js
   <header color='red'/>
   <header color='green'/>       //reusing of components output-- 2 times Hello
   Header.js
   <div style={{backgroundColor:color}}>Hello</div>
   
 - Props are arguments passed into React components.
   React Props are like function arguments in JavaScript and attributes in HTML.
   Props are the data passed from a parent component into a child component.
   Using props, we can pass data from one component to another.
   const myElement = <Car brand="Ford" />;
   
 - Events:
   function Football() {
  const shoot = () => {          //shoot is an event handler function
    alert("Great Shot!");
  }

  return (
    <button onClick={shoot}>Take the shot!</button>
  );
}

- Create a list using .map() function
   const tasks=[     //here task state is outside main function, to use state inside function useState is used
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }
   ]
   func =()=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   // to pass within the function
   func =()=>{
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}
   )
   }
   
   //to use the state anywhere, it is passed globally 
   App.js
   const [tasks, setTasks]=useState([
   {
   id: '
   text: ,
   },
   {
   id: '
   text: ,
   }]
   )
   
   return(
   <Tasks tasks={tasks}/>
   )
   
   Tasks.js
   func =({tasks})=>{
   return(
   {tasks.map((task)=>(<h3>{task.text}</h3>))}     //tasks is a function passed inside map
   )
   
- useState
   Since useState hook returns an array of two items, the first item contains the current state, and the second item is a function used to update the state.
      
- setTodo(...todo, {})     //...todo -- brings old data and {} -- adds new one to current array/list

- updating setTasks:
   const toggle=(id)=>{
   setTasks(
   tasks.map((task)=>task.id===id?{...task , reminder : task.reminder}:task)
   )
   }
   
- <input value={text} onChange={(e)=> setText(e.target.value)}/>     // e.target.value sets the value by setText whatever is typed in
 
- <div className= {`task ${ task.reminder ? reminder : ''}`}>        //task will be the class no matter what, 
// more will be added if condition given by ${} gets fulfilled , it's all due to ``
